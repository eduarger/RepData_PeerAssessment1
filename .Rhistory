install.packages("KernSmooth")
search()
pwd
library(KernSmooth)
add2 <- function(x,y)
{
x+y
}
add2(10,100)
above10 <- function(x)
{
use <- x > 10
x[use]
}
above <- function(x,n)
{
use <- x > 10
x[use]
}
x <- 1:10
above(x,2)
x
above <- function(x,n)
{
use <- x > n
x[use]
}
above(x,2)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
pwd
pdw
cwd
cdw
pwd
getwd
getwd()
# Put comments here that give an overall description of what your
-## functions do
+## Below are two functions that are used to create a special object
+## that stores a matrix and cache its solve
-## Write a short comment describing this function
-
-makeCacheMatrix <- function(x = matrix()) {
+## The first function, makeCacheMatrix creates a special matrix,
+## which is really a list containing a function to:
+## 1) set the value of the matrix
+## 2) get the value of the matrix
+## 3) set the value of the solve
+## 4) get the value of the solve
+makeCacheMatrix <- function(x = matrix(x, nrow = , ncol = )) {
+      m <- NULL
+      set <- function(y) {
+            x <<- y
+            m <<- NULL
+      }
+      get <- function() x
+      setsolve <- function(solve) m <<- solve
+      getsolve <- function() m
+      list(set = set, get = get,
+           setsolve = setsolve,
+           getsolve = getsolve)
}
-
-## Write a short comment describing this function
+## The following function calculates the solve of the special matrix
+## created with the above function.
cacheSolve <- function(x, ...) {
-        ## Return a matrix that is the inverse of 'x'
-}
+      m <- x$getsolve()
+      if(!is.null(m)) {
+            message("getting cached data")
+            return(m)
+      }
+      data <- x$get()
+      m <- solve(data, ...)
+      x$setsolve(m)
+      m
+}
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region= state.region)
xyplot(Life.Exp~Income | region=state, layout=c(4,1))
xyplot(Life.Exp~Income | region=state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data=state, layout=c(4,1))
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
defaults write org.R-project.R force.LANG en_US.UTF-8
defaults write org.R-project.R force.LANG en_US.UTF-8
pwd
cwd
wd
cwd
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("RMySQL")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month)
)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month)
)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
install.packges(mgcv)
install.packages("mgcv")
install.packages("mgcv")
qplot(votes, rating, data = movies) + geom_smooth()
library("ggplot2")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
source('~/.active-rstudio-document', echo=TRUE)
pwd
getwd
getwd()
?dir
help
setwd("~/RepData_PeerAssessment1")
?dir
?strptime
d<-trptime(data$date, "%F")
d<-strptime(data$date, "%F")
d=strptime(data$date, "%F")
d=strptime(activity$date, "%F")
zipfile="activity.zip"
file="activity.csv"
activity <- read.csv(unz(zipfile, file), sep=",", header=TRUE, stringsAsFactors=FALSE)
d=strptime(activity$date, "%F")
head(d)
head(activity)
d=strptime(activity$date, "%F", usetz= FALSE)
head(d)
d=strptime(activity$date, "%Y-%m-%d", usetz= FALSE)
head(d)
d= as.POSIXlt(activity$date, "%Y-%m-%d", usetz= FALSE)
head(d)
d= POSIXct(activity$date, "%Y-%m-%d", usetz= FALSE)
d= as.POSIXct(activity$date, "%Y-%m-%d", usetz= FALSE)
head(d)
d=strptime(activity$date, "%Y-%m-%d", tz="", usetz= FALSE)
d=as.DATE(activity$date, "%Y-%m-%d", tz="", usetz= FALSE)
d=as.Date(activity$date, "%Y-%m-%d", tz="", usetz= FALSE)
head(s)
head(d)
class(s)
class(d)
d=as.Date(activity$date, "%Y-%m-%d", tz="", usetz= TRUE)
head(d)
activity <- read.csv(unz(zipfile, file), sep=",", header=TRUE, stringsAsFactors=TRUE)
names(activity)
class(activity$date)
activity$date
activity$date.list()
activity$date.list
levels(activity$date)
A <- mean(activity$interval[activity$date == "2012-11-30"])
A
a<-levels(acticity$Date)
a<-levels(activity$Date)
a
a<-levels(activity$date)
a
class(a)
a(1)
a[1]
?ave
ave(activity, FUN=mean)
tapply(activity$steps, activity$date, mean)
bb<-tapply(activity$steps, activity$date, mean)
View(activity)
View(activity)
bb[1]
bb[2]
bb[3]
means<-aggregate(steps ~ date, data = activity, mean)
head(means)
head()
means
? agregate
?aggregate
means<-aggregate(steps ~ date, data = activity, mean,na.action=na.)
means<-aggregate(steps ~ date, data = activity, mean,na.action=na.pass)
means
library(xtable)
install.packages("xtable")
means<-aggregate(steps ~ date, data = activity, sum,na.action=na.pass)
means
View(activity)
View(activity)
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
---
## Loading and preprocessing the data
First we have to unzip the data, we will use the function unz and then we read the CSV file:
```{r unzipdata}
zipfile="activity.zip"
file="activity.csv"
activity <- read.csv(unz(zipfile, file), sep=",", header=TRUE, stringsAsFactors=FALSE)
```
```{r names, results='hide', echo=FALSE}
names<-names(activity)
```
cheking the names of the columns, it is found that the data has the following: `r names`. With the names we will evaluate the class of the columns in order to know if is necesarry some transformation on the variables:
```{r classes}
class(activity$steps)
class(activity$date)
class(activity$interval)
```
As you see the column *date*  is factor, in fact this is a date, so, we could transform to a date, but for now we will let it as factor.
## What is mean total number of steps taken per day?
In this point is useful use the function *aggregate* , we will take account the *N.A* to know in which date there is no data, also the column of the stpes is renamed to **TotalStepsDay**
```{r calmeans}
total<-aggregate(steps ~ date, data = activity, sum,na.action=na.pass)
colnames(total)[2] <- "Total"
```
Below you will find the histogram for the total steps.
```{r histogram total}
hist(total$date, total$Total)
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
Below you will find the histogram for the total steps.
```{r calmeans}
total<-aggregate(steps ~ date, data = activity, sum,na.action=na.pass)
colnames(total)[2] <- "Total"
View(total)
View(total)
hist(total)
dates=strptime(total$date, "%Y/%m/%d", tz="", usetz=false)
head(dates)
dates<-strptime(total$date, "%Y/%m/%d", tz="", usetz=true)
head(dates)
dates<-strptime(total$date, "%Y/%m/%d")
head(dates)
?strptime
dates<-strptime(total$date, "%Y-%m-%d")
head(dates)
dates<-strptime(total$date, "%Y-%m-%d", usetz=true)
head(dates)
dates<-strptime(total$date, "%Y-%m-%d", tz="",  usetz=true)
head(true)
head(dates)
dates<-strptime(total$date, "%Y-%m-%d", tz="",  usetz=false)
head(dates)
Below you will find the histogram for the total steps, first we convert the factor to a date.
dates<-strptime(total$date, "%Y-%m-%d", tz="",  usetz=false)
hist(dates, total$Total, col="red", main="Total steps per day", xlab="date")
dates<-strptime(total$date, "%Y-%m-%d", tz="",  usetz=false)
hist(dates, total$Total, col="red", main="Total steps per day", xlab="date")
dates<-strptime(total$date, "%Y-%m-%d", tz="",  usetz=false)
hist(dates, total$Total, col="red", main="Total steps per day", xlab="date")
dates<-strptime(total$date, "%Y-%m-%d", tz="",  usetz=false)
hist(dates,total$Total)
dates
dates<-strptime(total$date, "%Y-%m-%d", tz="",  usetz=true)
head(dates)
hist(dates,total$Total)
install.packages("devtools")
hist(dates,total$Total)
dates<-as.Date(total$date, "%Y-%m-%d", tz="",  usetz=true)
head(dates)
hist(dates,total$Total)
dates
class(dates)
total$date<-as.Date(total$date, "%Y-%m-%d", tz="",  usetz=true)
hist(total)
class(total$Total)
t=as.numeric(total$Total)
class(t)
hist(dates,t)
total$Total=as.numeric(total$Total)
hist(total)
hist(total$Total)
hist(total$Total, col="red", main="Total steps per day")
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
---
## Loading and preprocessing the data
First we have to unzip the data, we will use the function unz and then we read the CSV file:
```{r unzipdata}
zipfile="activity.zip"
file="activity.csv"
activity <- read.csv(unz(zipfile, file), sep=",", header=TRUE, stringsAsFactors=FALSE)
```
```{r names, results='hide', echo=FALSE}
names<-names(activity)
```
cheking the names of the columns, it is found that the data has the following: `r names`. With the names we will evaluate the class of the columns in order to know if is necesarry some transformation on the variables:
```{r classes}
class(activity$steps)
class(activity$date)
class(activity$interval)
```
As you see the column *date*  is factor, in fact this is a date, so, we could transform to a date, but for now we will let it as factor.
## What is mean total number of steps taken per day?
In this point is useful use the function *aggregate* , we will take account the *N.A* to know in which date there is no data, also the column of the stpes is renamed to **TotalStepsDay**
```{r calmeans}
total<-aggregate(steps ~ date, data = activity, sum,na.action=na.pass)
colnames(total)[2] <- "Total"
```
Below you will find the histogram for the total steps.
```{r histogram total}
hist(total$Total, col="red", main="Total steps per day", xlab="Steps")
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
list.directories()
directories.list()
list.directoy()
directoy.list()
directory.list()
?list
?directories
?files
files.list()
install.packages("catools")
install.packages("caTools")
